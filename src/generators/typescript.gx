#prelude
export type Constructor<T> = new (...arguments_: any) => T;

let _messageMap: Map<string, Constructor<StructMessage>> = new Map();
let _fieldsMap: Map<Constructor<StructMessage>, StructField[]> = new Map();

abstract class StructMessage {}

const enum TyKindTag {
  Primitive,
  Message,
  Array,
}

type MessageClassID = string | Constructor<StructMessage>;

type TyKind =
  | { kind: TyKindTag.Primitive }
  | { kind: TyKindTag.Message; of: MessageClassID }
  | { kind: TyKindTag.Array; of: TyKind };

type StructField = {
  name: string;
  ty: TyKind;
};

function valueToPlainObject(value: any, ty: TyKind) {
  if (value === null) {
    return null;
  }
  //
  else if (ty.kind === TyKindTag.Primitive) {
    return value;
  }
  //
  else if (ty.kind === TyKindTag.Message) {
    let result: Record<string, any> = {};

    let fields = _fieldsMap.get(Object.getPrototypeOf(value).constructor)!;
    for (let i = 0; i < fields.length; ++i) {
      const { name: fieldName, ty } = fields[i];
      const fieldVal = value[fieldName];
      result[fieldName] = valueToPlainObject(fieldVal, ty);
    }

    return result;
  }
  //
  else if (ty.kind === TyKindTag.Array) {
    return (value as any[]).map((val) => valueToPlainObject(val, ty.of));
  } else {
    throw new Error("Invalid value/ty");
  }
}

function plainObjectToValue(obj: any, ty: TyKind) {
  if (obj === null) {
    return null;
  }
  //
  else if (ty.kind === TyKindTag.Primitive) {
    return obj;
  } else if (ty.kind === TyKindTag.Message) {
    let ctor = typeof ty.of === "string" ? _messageMap.get(ty.of)! : ty.of;
    let fields = _fieldsMap.get(ctor)!;

    let createPayload = {};
    for (let i = 0; i < fields.length; ++i) {
      const { name: fieldName, ty } = fields[i];
      const fieldVal = obj[fieldName];
      createPayload[fieldName] = plainObjectToValue(fieldVal, ty);
    }

    // TODO: Make this strongly typed
    return (ctor as any).create(createPayload);
  }
  //
  else if (ty.kind === TyKindTag.Array) {
    return (obj as any[]).map((val) => plainObjectToValue(val, ty.of));
  }
  //
  else {
    throw new Error("Invalid value/ty");
  }
}

export function packMessage<M extends StructMessage>(message: M) {
  return JSON.stringify(
    valueToPlainObject(message, {
      kind: TyKindTag.Message,
      of: Object.getPrototypeOf(message).constructor,
    })
  );
}

export function unpackMessage<M extends StructMessage>(
  messageType: Constructor<M>,
  serialized: string
): M {
  let obj = JSON.parse(serialized);
  return plainObjectToValue(obj, {
    kind: TyKindTag.Message,
    of: messageType,
  });
}

type FieldsOf<T> = Pick<
  T,
  {
    [K in keyof T]: T[K] extends Function ? never : K;
  }[keyof T]
>;

type Optional<T> = T | null;
#end/prelude

// --------------------------------------------------------------

#types

string { string }
int { number }
float { float }
bool { boolean }
array { Array<%T%> }
null { Optional<%T%> }
struct { %T% }

#end/types

// --------------------------------------------------------------

#type_visitor

primitive {{ kind: TyKindTag.Primitive }}

message {{
  kind: TyKindTag.Message,
  of: "%name%"
}}

array {{
  kind: TyKindTag.Array,
  of: %of%
}}

main {{ name: "%name%", ty: %ast% }}

#end/type_visitor

// -------------------------------------------------------------- 

#field_visitor
public %name%!: %ty%;
#end/field_visitor

// -------------------------------------------------------------- 

#message_struct

/* ============================================== */

const _%name%Fields: StructField[] = [
  %type_ast/,%
];

export class %name% extends StructMessage {
  static create(body: FieldsOf<%name%>): %name% {
    return Object.assign(new %name%(), body);
  }

  %fields%
}

_messageMap.set("%name%", %name%);
_fieldsMap.set(%name%, _%name%Fields);

#end/message_struct