#prelude
abstract class StructMessage {}

type FieldsOf<T> = Pick<
  T,
  {
    [K in keyof T]: T[K] extends Function ? never : K;
  }[keyof T]
>;

type Optional<T> = T | null;
#end/prelude

// --------------------------------------------------------------

#types

string { string }
int { number }
float { float }
bool { boolean }
array { Array<%T%> }
null { Optional<%T%> }
struct { %T% }

#end/types

// -------------------------------------------------------------- 

#field_visitor
public %name%!: %ty%;
#end/field_visitor

// -------------------------------------------------------------- 

#message_struct

/* ============================================== */

export class %name% extends StructMessage {
  static create(body: FieldsOf<%name%>): %name% {
    return Object.assign(new %name%(), body);
  }

  %fields%
}

#end/message_struct